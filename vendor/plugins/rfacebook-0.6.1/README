============================== FACEBOOK RAILS CONTROLLER EXTENSIONS NOTES ==============================

Rails Applications:

First, set up your Facebook Developer account properly.  By properly,
I mean that you need to set your callback URL to be the root of your
Rails application.  For example:

	Callback URL >>> http://www.mycrazywebsite.com/     ***NOTE: trailing slash is necessary
	Canvas Page URL >>> http://apps.facebook.com/mycrazywebsite
	
Then, whenever a user visits
	
	http://apps.facebook.com/mycrazywebsite/someRailsController/someAction

...the Facebook API will call:
	
	http://www.mycrazywebsite.com/someRailsController/someAction


You can get this behavior by installing the new RFacebook gem. After
installing the gem, make your ApplicationController look like this:

 require "facebook_rails_controller_extensions"

 class ApplicationController < ActionController::Base

   # additions to integrate Facebook into controllers
   include RFacebook::RailsControllerExtensions

   def facebook_api_key
     return "YOUR API KEY HERE"
   end

   def facebook_api_secret
     return "YOUR API SECRET HERE"
   end

 end

You will have access to 2 new items in your controllers:

(1) "fbsession"
Contains a FacebookWebSession.  Will return false for "is_valid?" if you haven't forced the user to log in.


(2) "fbparams"
Contains all the params that are prefixed with "fb_sig_".  You shouldn't ever *really* need this, but its there just in case.


And, you have a few new filters to try out:

(1) require_facebook_login
(2) require_facebook_install

For example, one of my Rails controllers looks like this:

 class FacebookController < ApplicationController
   
   before_filter :require_facebook_install # require users to install the application (less intrusive is to require_facebook_login)
   
   def index
     xml = fbsession.users_getInfo(:uids => [fbsession.session_user_id], :fields => ["first_name", "last_name"])
     @firstName = xml.at("first_name").inner_html
     @lastName = xml.at("last_name").inner_html
   end
   
   
 end



============================== FACEBOOK PLATFORM NOTES ==============================


============================== IMPORTANT NOTES ==============================


** THIS IS ESPECIALLY IMPORTANT FOR PEOPLE WHO USED THE OLD CLIENT WHEN IT WAS CALLED "RBook" **

[1] The RBook name was already taken, so now you need to change any "RBook" references to "RFacebook"

[2] The desktop app login process is much simpler now:

	fbsession = RFacebook::FacebookDesktopSession.new(APIKEY, APISECRET)
	puts fbsession.get_login_url # tell the user to login at this url
	# ...after the user logs in...
	fbsession.activate

[3] The "init_with_token" method is now "activate_with_token" (it is a little less confusing with this naming)

[4] A helpful "NotActivatedException" will be raised if you forget to activate your session in one of the following ways:

		Web: you must call either "activate_with_token" or "activate_with_previous_session"
		Desktop: you must call either "activate" or "activate_with_previous_session"

[5] Infinite sessions are now supported (web and desktop)...

		Web:
		
			(a) Save the session key to a file or something
				(i.e. "keyToSave = fbsession.session_key")
				
			(b) Normally, you would redirect the user to "get_login_url" and then call "activate_with_token" after the callback.
				With an infinite session, skip these two steps and call "fbsession.activate_with_previous_session(keyToSave)" instead.
		
		Desktop:
		
			(a) Save the session key and session secret to a file or something
				(i.e. "keyToSave = fbsession.session_key" and "secretToSave = fbsession.session_secret")
			
			(b) Normally, you would redirect the user to "get_login_url" and then call "activate".
				With an infinite session, skip these two steps and call "fbsession.activate_with_previous_session(keyToSave, secretToSave)" instead.



============================== LICENSE ==============================

Copyright (c) 2007, Matt Pizzimenti (www.livelearncode.com)
All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

Neither the name of the original author nor the names of contributors
may be used to endorse or promote products derived from this software
without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.



Some code was inspired by techniques used in Alpha Chen's old client.
Some code was ported from the official PHP5 client.

